from Project_utils import *
import warnings
warnings.simplefilter("ignore")
np.random.seed(12)

D = 1
K = 4
N = 10000
p = [lambda loc: st.norm.rvs(loc=loc, scale=3)] * K
u0 = st.uniform(loc=-3, scale=6).rvs
Ns = 1
T_factor = 2
gammas = [1, 2, 4, 8, 16]
experiment_control = [None] * len(gammas)
experiment_contrast = [None] * len(gammas)


val = input('Enter y to read data from disk, n to regenerate data\n')

# generate data from Markov Chain
for j, gamma in enumerate(gammas):
    file_simple_name = 'data/ex2/simple_gamma' + str(gamma) + '.obj'
    file_walk_name = 'data/ex2/walk_gamma' + str(gamma) + '.obj'
    u = [lambda x, T=k: np.exp(-gamma * (x ** 2 - 1) ** 2 / (T_factor ** T)) for k in range(K)]
    experiment_control[j] = ParallelTempering(D, K, N, p, u, u0, Ns)
    experiment_contrast[j] = ParallelTempering(D, K, N, p, u, u0, Ns)
    if val == 'n':
        _, acc = experiment_control[j].generateMarkovChain(mode='simple PT')
        print('Simple PT: swapping acceptance rate when gamma=%d: %f' % (gamma, acc))
        experiment_contrast[j].generateMarkovChain(mode='without PT')
        experiment_control[j].save(file_simple_name)
        experiment_contrast[j].save(file_walk_name)
    else:
        experiment_control[j].load(file_simple_name)
        experiment_contrast[j].load(file_walk_name)

# plot the histograms of samples
fig = plt.figure(figsize=(30, 8))
for j, gamma in enumerate(gammas):
    ax = fig.add_subplot(2, 5, j + 1)
    experiment_control[j].plot_hist(ax, 'gamma = ' + str(gamma))
    ax = fig.add_subplot(2, 5, 5 + j + 1)
    experiment_contrast[j].plot_hist(ax, 'gamma = ' + str(gamma))
plt.savefig('figures/ex2/hist.png')
plt.show()

# plot the auto-correlation plots
fig = plt.figure(figsize=(30, 8))
for j, gamma in enumerate(gammas):
    ax = fig.add_subplot(2, 5, j + 1)
    experiment_control[j].plot_acf(ax, 'gamma = ' + str(gamma))
    ax = fig.add_subplot(2, 5, 5 + j + 1)
    experiment_contrast[j].plot_acf(ax, 'gamma = ' + str(gamma))
plt.savefig('figures/ex2/auto_correlation.png')
plt.show()

# plot the trace-plots
fig = plt.figure(figsize=(15, 20))
for j, gamma in enumerate(gammas):
    ax = fig.add_subplot(10, 1, j + 1)
    experiment_control[j].plot_trace(ax, 'gamma = ' + str(gamma))
    ax = fig.add_subplot(10, 1, j + 6)
    experiment_contrast[j].plot_trace(ax, 'gamma = ' + str(gamma))
plt.savefig('figures/ex2/trace_plot.png')
plt.show()

# compute the effective sample size
max_iter = 5
for j, gamma in enumerate(gammas):
    ess_xs = experiment_control[j].get_effective_sample_size()
    ess_walk = experiment_contrast[j].get_effective_sample_size()
    for l in range(max_iter-1):
        experiment_control[j].generateMarkovChain('simple PT')
        experiment_contrast[j].generateMarkovChain('without PT')
        ess_xs += experiment_control[j].get_effective_sample_size()
        ess_walk += experiment_contrast[j].get_effective_sample_size()
    print('average of ' + str(max_iter) + 'times of running')
    print('effective sample size with gamma = %d generated by simple PT: %f' % (gamma, ess_xs / max_iter))
    print('effective sample size with gamma = %d generated by random walk MH: %f' % (gamma, ess_walk / max_iter))
